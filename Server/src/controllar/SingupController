const UserDetails = require('../models/signupModel');
const { z } = require('zod')
const bcrypt = require('bcrypt')
const saltRounds = 10;
const jwt = require('jsonwebtoken')

const signInSchema = z.object({
    email: z.string().email("Invalid email address"),
    password: z.string().min(6, "Password must be at least 6 characters long"),
});



const userRegister = async (req, res) => {
    try {
        const { firstName, email, password } = req.body;
        const user = await UserDetails.findOne({ email })
        if (user) {
            return res.status(409).json({ message: "user aleready exist", success: false })

        }
        const hashedPassword = await bcrypt.hash(password, saltRounds);

        const token = jwt.sign(
            { email },
            'secret',
            { expiresIn: '1h' }
        );

        const register_user = await UserDetails.create({
            firstName,
            email,
            password: hashedPassword,
            token
        });

        res.status(201).send({ status: "true", user: register_user });
    } catch (error) {
        res.status(500).send({ status: "false", message: error.message });
    }
};
const userLogin = async (req, res) => {
    try {
        const { email, password } = req.body;


        const validation = signInSchema.safeParse(req.body);
        if (!validation.success) {
            return res.status(400).send({ status: "false", message: "Invalid input format" });
        }


        const user = await UserDetails.findOne({ email });
        if (!user) {
            return res.status(404).json({ status: "false", message: "User not found" });
        }

        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            return res.status(401).json({ status: "false", message: "Invalid password" });
        }

        const payload = { email: user.email };
        const token = jwt.sign(payload, 'secret', { expiresIn: '1h' });

        // const tokenUpdate = await UserDetails.updateOne({ email }, { token });
        const tokenUpdate = await UserDetails.updateOne({ token });
        if (!tokenUpdate.modifiedCount) {
            return res.status(500).json({ status: "002", message: "Failed to update token" });
        }

        return res.status(200).json({
            status: "001",
            message: "Login successful",
            token,
            user: {
                id: user._id,
                firstName: user.firstName,
                email: user.email,
            },
        });
    } catch (error) {
        return res.status(500).json({ status: "false", message: "Internal server error", error: error.message });
    }
};
const userLogout = async (req, res) => {
    const { email } = req.body;

    try {
        const Cheackuser = await UserDetails.findOne({ email })
        if (!Cheackuser) {
            return res.json({ status: false, error: "Invalid Email" });
        }
        const user = await UserDetails.findOneAndUpdate(
            { email },
            { token: null }
        );
        if (!user) {
            return res.status(404).json({ status: false, error: "User not found" });
        }

        res.status(200).json({ status: true, message: "Logout successful" });
    } catch (error) {
        res.status(500).json({ status: false, error: error.message });
    }
};

const get = async (req, res) => {
    try {
        const getUsers = await UserDetails.find({}); // Fetch users with role 0
        return res.status(200).json({ message: "User fetch successful", getUsers });
    } catch (error) {
        return res.status(500).json({ message: "Server error", error: error.message });
    }
};


const getData = async (req, res) => {
    try {
        const id = req.params.id
        console.log(id, "id***********************")
        const result = await UserDetails.findById(id);
        return res.status(200).send({ Message: result })
    } catch (error) {
        console.log(error)
        return res.status(500).send({ message: error })
    }
}


const updateUser = async (req, res) => {
    try {
        console.log(req.body, "body");



        const { firstName, phone, gender, dateOfBirth, address } = req.body;
        // console.log(req.body.firstName,"*************");
        // console.log(req.params.id);
        // console.log(firstName)

        const profileImageArray = req.files?.map((file) => file.filename);


        var baseUrl = `http://${req.get("host")}`;
        baseUrl += "/Uploads/" + req.files[0].filename;


        const userId = req.params.id; // Assuming `req.user.id` contains the authenticated user's ID
        const date = new Date(dateOfBirth);

        const updateData = {
            firstName,
            phone,
            gender,
            dateOfBirth: date,
            address,
            profilePicture: profileImageArray,

        };

        if (profileImageArray?.length) {
            updateData.profilePicture = profileImageArray;
        }

        const updatedUser = await UserDetails.findByIdAndUpdate(
            userId,
            { $set: updateData },
            { new: true, runValidators: true }
        );

        if (!updatedUser) {
            return res.status(404).send({ message: "User not found" });
        }

        res.status(200).send({
            message: "Profile updated successfully",
            updatedUser,
        });
    } catch (error) {
        res.status(500).send({
            message: "An error occurred while updating the profile",
            error: error.message,
        });
    }
};





module.exports = {
    userRegister, userLogin, userLogout, updateUser, getData, get
}